/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.64).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Book;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-11-14T18:38:18.191886612Z[GMT]")
@Validated
public interface BooksApi {

    @Operation(summary = "Fetch available books", description = "Use this API to fetch details of available books", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "fetched available books successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))),
        
        @ApiResponse(responseCode = "404", description = "no books are available"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error.Unable to fetch books") })
    @RequestMapping(value = "/books/availability",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> findBooksAvailability();


    @Operation(summary = "Deletes book with given bookId", description = "Use this API to delete details of a book with given bookId", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "deleted book with given id successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))),
        
        @ApiResponse(responseCode = "404", description = "no book found with given bookId"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error.Unable to delete book") })
    @RequestMapping(value = "/books/{bookId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Book> booksBookIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("bookId") Integer bookId
);


    @Operation(summary = "Fetch books with specific genre", description = "Use this API to fetch details of a book with given genre", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "fetched books successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))),
        
        @ApiResponse(responseCode = "404", description = "no books found with given genre"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error.Unable to fetch books") })
    @RequestMapping(value = "/books/{genre}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> findBooksGenre(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("genre") String genre
);


    @Operation(summary = "Add book to the store", description = "Use this API to create book", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Book created successfully"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error. Unable to create book.") })
    @RequestMapping(value = "/books",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addBooks(@Parameter(in = ParameterIn.DEFAULT, description = "Structure of a book", required=true, schema=@Schema()) @Valid @RequestBody Book body
);

}

